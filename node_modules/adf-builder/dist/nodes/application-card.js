"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const index_1 = require("./index");
class Action {
    title(title) {
        this.actionTitle = title;
        return this;
    }
    target(target) {
        if (!target.key) {
            throw new Error('Action target key is required');
        }
        this.actionTarget = target;
        return this;
    }
    parameters(parameters) {
        this.actionParameters = parameters;
        return this;
    }
    toJSON() {
        const action = {};
        if (this.actionTitle) {
            action.title = this.actionTitle;
        }
        if (this.actionTarget) {
            action.target = this.actionTarget;
        }
        if (this.actionParameters) {
            action.parameters = this.actionParameters;
        }
        if (Object.keys(action).length < 2) {
            throw new Error('Must set title and target attributes for action');
        }
        return action;
    }
}
exports.Action = Action;
class Detail {
    constructor() {
        this.detailUsers = [];
    }
    title(text) {
        this.detailTitle = text;
        return this;
    }
    text(text) {
        this.detailText = text;
        return this;
    }
    lozenge(lozenge) {
        this.detailLozenge = lozenge;
        return this;
    }
    icon(icon) {
        this.detailIcon = icon;
        return this;
    }
    badge(badge) {
        this.detailBadge = badge;
        return this;
    }
    user(user) {
        this.detailUsers.push(user);
        return this;
    }
    toJSON() {
        const detail = {};
        if (this.detailTitle) {
            detail.title = this.detailTitle;
        }
        if (this.detailText) {
            detail.text = this.detailText;
        }
        if (this.detailIcon) {
            detail.icon = this.detailIcon;
        }
        if (this.detailBadge) {
            detail.badge = this.detailBadge;
        }
        if (this.detailLozenge) {
            detail.lozenge = this.detailLozenge;
        }
        if (this.detailUsers.length > 0) {
            detail.users = this.detailUsers;
        }
        if (Object.keys(detail).length === 0) {
            throw new Error('Must at least set one attribute');
        }
        return detail;
    }
}
exports.Detail = Detail;
class Context {
    constructor(text) {
        this.text = text;
    }
    icon(icon) {
        this.contextIcon = icon;
        return this;
    }
    toJSON() {
        const context = {
            text: this.text
        };
        if (this.contextIcon) {
            context.icon = this.contextIcon;
        }
        return context;
    }
}
exports.Context = Context;
class TitleUser {
    constructor(titleUserIcon) {
        this.titleUserIcon = titleUserIcon;
    }
    id(id) {
        this.titleUserId = id;
        return this;
    }
    toJSON() {
        const titleUser = {
            icon: this.titleUserIcon
        };
        if (this.titleUserId) {
            titleUser.id = this.titleUserId;
        }
        return titleUser;
    }
}
exports.TitleUser = TitleUser;
class ApplicationCard extends index_1.TopLevelNode {
    constructor(title, text) {
        super();
        this.title = title;
        this.text = text;
        this.isCollapsible = false;
        this.details = [];
        this.actions = [];
    }
    link(url) {
        this.linkUrl = url;
        return this;
    }
    background(url) {
        this.backgroundUrl = url;
        return this;
    }
    preview(url) {
        this.previewUrl = url;
        return this;
    }
    collapsible(collapsible) {
        this.isCollapsible = collapsible;
        return this;
    }
    description(text) {
        this.descriptionText = text;
        return this;
    }
    titleUser(icon) {
        const titleUser = new TitleUser(icon);
        this.userInTitle = titleUser;
        return titleUser;
    }
    detail() {
        const detail = new Detail();
        this.details.push(detail);
        return detail;
    }
    action() {
        const action = new Action();
        this.actions.push(action);
        return action;
    }
    context(text) {
        this.cardContext = new Context(text);
        return this.cardContext;
    }
    toJSON() {
        const card = {
            type: 'applicationCard',
            attrs: {
                text: this.text || this.title,
                title: {
                    text: this.title
                },
                collapsible: this.isCollapsible
            }
        };
        if (this.linkUrl) {
            card.attrs.textUrl = this.linkUrl;
            card.attrs.link = {
                url: this.linkUrl
            };
        }
        if (this.backgroundUrl) {
            card.attrs.background = {
                url: this.backgroundUrl
            };
        }
        if (this.previewUrl) {
            card.attrs.preview = {
                url: this.previewUrl
            };
        }
        if (this.descriptionText) {
            card.attrs.description = {
                text: this.descriptionText
            };
        }
        if (this.userInTitle) {
            card.attrs.title.user = this.userInTitle.toJSON();
        }
        if (this.details.length > 0) {
            card.attrs.details = this.details.map(detail => detail.toJSON());
        }
        if (this.actions.length > 0) {
            card.attrs.actions = this.actions.map(action => action.toJSON());
        }
        if (this.cardContext) {
            card.attrs.context = this.cardContext.toJSON();
        }
        return card;
    }
}
exports.ApplicationCard = ApplicationCard;
//# sourceMappingURL=application-card.js.map