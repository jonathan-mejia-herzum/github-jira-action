"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const action_1 = require("./action");
const code_1 = require("./code");
const em_1 = require("./em");
const link_1 = require("./link");
const strike_1 = require("./strike");
const strong_1 = require("./strong");
const subsup_1 = require("./subsup");
const text_color_1 = require("./text-color");
const underline_1 = require("./underline");
function marks() {
    return new Marks();
}
exports.marks = marks;
class Marks {
    constructor() {
        this.marks = [];
    }
    code() {
        return this.add(new code_1.Code());
    }
    em() {
        return this.add(new em_1.Em());
    }
    link(href, title) {
        return this.add(new link_1.Link(href, title));
    }
    strike() {
        return this.add(new strike_1.Strike());
    }
    strong() {
        return this.add(new strong_1.Strong());
    }
    sub() {
        return this.add(new subsup_1.SubSup('sub'));
    }
    sup() {
        return this.add(new subsup_1.SubSup('sup'));
    }
    color(color) {
        return this.add(new text_color_1.TextColor(color));
    }
    underline() {
        return this.add(new underline_1.Underline());
    }
    action(title, target, actionParameters) {
        return this.add(new action_1.Action(title, target, actionParameters));
    }
    toJSON() {
        if (this.marks.length === 0) {
            throw new Error('At least one mark is required');
        }
        return this.marks.map(mark => mark.toJSON());
    }
    add(mark) {
        const existing = this.marks.filter(m => m.type === mark.type);
        if (existing.length > 0) {
            throw new Error('A mark type can only be used once');
        }
        this.marks.push(mark);
        return this;
    }
}
exports.Marks = Marks;
//# sourceMappingURL=index.js.map