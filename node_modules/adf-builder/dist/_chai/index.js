"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const Ajv = require("ajv");
const axios = require("axios");
const betterAjvErrors = require("better-ajv-errors");
// tslint:disable-next-line:max-line-length
const SCHEMA_URL = 'https://bitbucket.org/atlassian/atlaskit-mk-2/raw/master/packages/editor/editor-common/json-schema/v1/full.json';
const ajv = new Ajv({ jsonPointers: true });
let cachedValidator;
class ValidationError extends Error {
    constructor(message, schema, data, errors) {
        super(message);
        this.schema = schema;
        this.data = data;
        this.errors = errors;
    }
    toString() {
        return betterAjvErrors(this.schema, this.data, this.errors, { indent: 2 });
    }
}
function adfValidator() {
    return __awaiter(this, void 0, void 0, function* () {
        const schemaValidator = yield validator();
        return (chai, utils) => {
            chai.Assertion.addMethod('validADF', function () {
                try {
                    schemaValidator(this._obj);
                    this.assert(true, '', 'expected document to not be valid');
                }
                catch (e) {
                    this.assert(false, e.toString());
                }
            });
        };
    });
}
exports.adfValidator = adfValidator;
function validator() {
    return __awaiter(this, void 0, void 0, function* () {
        if (!cachedValidator) {
            const schema = yield loadSchema();
            const validate = ajv.compile(schema);
            cachedValidator = (doc) => {
                const data = doc.toJSON();
                if (validate(data) === false) {
                    throw new ValidationError('Validation failed', schema, data, validate.errors || []);
                }
            };
        }
        return cachedValidator;
    });
}
function loadSchema() {
    return __awaiter(this, void 0, void 0, function* () {
        const response = yield axios.default.get(SCHEMA_URL);
        return response.data;
    });
}
//# sourceMappingURL=index.js.map